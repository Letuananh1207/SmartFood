
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ChefHat, Clock, Users, Search, Heart, Star, Refrigerator } from "lucide-react";
import { toast } from "@/hooks/use-toast";

const Recipes = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedDifficulty, setSelectedDifficulty] = useState("all");
  const [favorites, setFavorites] = useState(new Set([1, 3]));

  const recipes = [
    {
      id: 1,
      name: "Ph·ªü b√≤ truy·ªÅn th·ªëng",
      description: "M√≥n ph·ªü b√≤ ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã Vi·ªát Nam v·ªõi n∆∞·ªõc d√πng trong veo",
      cookTime: "2 gi·ªù",
      servings: 4,
      difficulty: "Kh√≥",
      ingredients: ["X∆∞∆°ng b√≤", "Th·ªãt b√≤", "B√°nh ph·ªü", "H√†nh t√¢y", "G·ª´ng", "Qu·∫ø"],
      availableIngredients: ["Th·ªãt b√≤", "H√†nh t√¢y", "G·ª´ng"],
      missingIngredients: ["X∆∞∆°ng b√≤", "B√°nh ph·ªü", "Qu·∫ø"],
      image: "üçú",
      rating: 4.8,
      category: "M√≥n ch√≠nh"
    },
    {
      id: 2,
      name: "G·ªèi cu·ªën t√¥m th·ªãt",
      description: "G·ªèi cu·ªën t∆∞∆°i ngon v·ªõi t√¥m v√† th·ªãt heo, ƒÉn k√®m t∆∞∆°ng ƒë·∫≠u ph·ªông",
      cookTime: "30 ph√∫t",
      servings: 2,
      difficulty: "D·ªÖ",
      ingredients: ["B√°nh tr√°ng", "T√¥m", "Th·ªãt heo", "B√∫n", "Rau th∆°m", "D∆∞a leo"],
      availableIngredients: ["T√¥m", "Rau th∆°m", "D∆∞a leo"],
      missingIngredients: ["B√°nh tr√°ng", "Th·ªãt heo", "B√∫n"],
      image: "ü•¨",
      rating: 4.6,
      category: "Khai v·ªã"
    },
    {
      id: 3,
      name: "C∆°m g√† H·∫£i Nam",
      description: "C∆°m g√† th∆°m ngon n·∫•u v·ªõi n∆∞·ªõc d√πng g√†, ƒÉn k√®m n∆∞·ªõc ch·∫•m ƒë·∫∑c bi·ªát",
      cookTime: "1 gi·ªù",
      servings: 3,
      difficulty: "Trung b√¨nh",
      ingredients: ["G√†", "G·∫°o", "G·ª´ng", "H√†nh t√¢y", "D·∫ßu m√®", "N∆∞·ªõc m·∫Øm"],
      availableIngredients: ["G√†", "G·∫°o", "G·ª´ng", "H√†nh t√¢y"],
      missingIngredients: ["D·∫ßu m√®", "N∆∞·ªõc m·∫Øm"],
      image: "üçö",
      rating: 4.7,
      category: "M√≥n ch√≠nh"
    },
    {
      id: 4,
      name: "B√°nh x√®o mi·ªÅn T√¢y",
      description: "B√°nh x√®o gi√≤n r·ª•m v·ªõi nh√¢n t√¥m th·ªãt, ƒÉn k√®m rau s·ªëng v√† n∆∞·ªõc ch·∫•m",
      cookTime: "45 ph√∫t",
      servings: 4,
      difficulty: "Trung b√¨nh",
      ingredients: ["B·ªôt b√°nh x√®o", "T√¥m", "Th·ªãt ba ch·ªâ", "Gi√° ƒë·ªó", "Rau th∆°m", "D·ª´a"],
      availableIngredients: ["T√¥m", "Gi√° ƒë·ªó", "Rau th∆°m"],
      missingIngredients: ["B·ªôt b√°nh x√®o", "Th·ªãt ba ch·ªâ", "D·ª´a"],
      image: "ü•û",
      rating: 4.5,
      category: "M√≥n ch√≠nh"
    },
    {
      id: 5,
      name: "Ch√® ƒë·∫≠u xanh",
      description: "Ch√® ƒë·∫≠u xanh ng·ªçt m√°t, th√≠ch h·ª£p cho ng√†y h√®",
      cookTime: "40 ph√∫t",
      servings: 4,
      difficulty: "D·ªÖ",
      ingredients: ["ƒê·∫≠u xanh", "ƒê∆∞·ªùng", "N∆∞·ªõc c·ªët d·ª´a", "Mu·ªëi", "L√° d·ª©a"],
      availableIngredients: ["ƒê·∫≠u xanh", "ƒê∆∞·ªùng"],
      missingIngredients: ["N∆∞·ªõc c·ªët d·ª´a", "Mu·ªëi", "L√° d·ª©a"],
      image: "üç®",
      rating: 4.4,
      category: "Tr√°ng mi·ªáng"
    },
    {
      id: 6,
      name: "Canh chua c√°",
      description: "Canh chua c√° ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã mi·ªÅn Nam v·ªõi d·ª©a v√† ƒë·∫≠u b·∫Øp",
      cookTime: "30 ph√∫t",
      servings: 4,
      difficulty: "D·ªÖ",
      ingredients: ["C√°", "D·ª©a", "ƒê·∫≠u b·∫Øp", "C√† chua", "Gi√° ƒë·ªó", "Me"],
      availableIngredients: ["C√°", "C√† chua", "Gi√° ƒë·ªó"],
      missingIngredients: ["D·ª©a", "ƒê·∫≠u b·∫Øp", "Me"],
      image: "üç≤",
      rating: 4.6,
      category: "Canh"
    }
  ];

  const toggleFavorite = (recipeId: number) => {
    const newFavorites = new Set(favorites);
    if (newFavorites.has(recipeId)) {
      newFavorites.delete(recipeId);
      toast({
        title: "ƒê√£ x√≥a kh·ªèi y√™u th√≠ch",
        description: "C√¥ng th·ª©c ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch y√™u th√≠ch",
      });
    } else {
      newFavorites.add(recipeId);
      toast({
        title: "ƒê√£ th√™m v√†o y√™u th√≠ch",
        description: "C√¥ng th·ª©c ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch y√™u th√≠ch",
      });
    }
    setFavorites(newFavorites);
  };

  const filteredRecipes = recipes.filter(recipe => {
    const matchesSearch = recipe.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         recipe.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesDifficulty = selectedDifficulty === "all" || recipe.difficulty === selectedDifficulty;
    return matchesSearch && matchesDifficulty;
  });

  const canMakeRecipes = recipes.filter(recipe => recipe.missingIngredients.length <= 2);

  return (
    <div className="space-y-8">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
          <ChefHat className="h-8 w-8 text-primary" />
          G·ª£i √Ω m√≥n ƒÉn
        </h1>
        <p className="text-lg text-gray-600">
          Kh√°m ph√° c√°c c√¥ng th·ª©c n·∫•u ƒÉn ph√π h·ª£p v·ªõi nguy√™n li·ªáu c√≥ s·∫µn
        </p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">T·ªïng c√¥ng th·ª©c</p>
                <p className="text-3xl font-bold text-gray-900">{recipes.length}</p>
              </div>
              <ChefHat className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">C√≥ th·ªÉ n·∫•u ngay</p>
                <p className="text-3xl font-bold text-green-600">{canMakeRecipes.length}</p>
              </div>
              <Refrigerator className="h-8 w-8 text-green-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Y√™u th√≠ch</p>
                <p className="text-3xl font-bold text-red-600">{favorites.size}</p>
              </div>
              <Heart className="h-8 w-8 text-red-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Can Make Now Section */}
      {canMakeRecipes.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Refrigerator className="h-5 w-5 text-green-600" />
              C√≥ th·ªÉ n·∫•u ngay h√¥m nay
            </CardTitle>
            <CardDescription>
              C√°c m√≥n ƒÉn b·∫°n c√≥ th·ªÉ n·∫•u v·ªõi nguy√™n li·ªáu hi·ªán c√≥ (thi·∫øu t·ªëi ƒëa 2 nguy√™n li·ªáu)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {canMakeRecipes.slice(0, 3).map((recipe) => (
                <Card key={recipe.id} className="hover:shadow-lg transition-all duration-300">
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="text-2xl">{recipe.image}</div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleFavorite(recipe.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Heart className={`h-4 w-4 ${favorites.has(recipe.id) ? 'fill-current' : ''}`} />
                        </Button>
                      </div>
                      <div>
                        <h4 className="font-semibold">{recipe.name}</h4>
                        <p className="text-sm text-gray-600 mt-1">{recipe.description}</p>
                      </div>
                      <div className="flex flex-wrap gap-1">
                        <Badge variant="outline" className="text-xs">
                          <Clock className="h-3 w-3 mr-1" />
                          {recipe.cookTime}
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          <Users className="h-3 w-3 mr-1" />
                          {recipe.servings} ng∆∞·ªùi
                        </Badge>
                        <Badge variant="secondary" className="text-xs">
                          <Star className="h-3 w-3 mr-1" />
                          {recipe.rating}
                        </Badge>
                      </div>
                      {recipe.missingIngredients.length > 0 && (
                        <div className="text-xs">
                          <p className="text-red-600 font-medium">C·∫ßn mua th√™m:</p>
                          <p className="text-red-600">{recipe.missingIngredients.join(", ")}</p>
                        </div>
                      )}
                      <Button size="sm" className="w-full">
                        Xem c√¥ng th·ª©c
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Search and Filter */}
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="T√¨m ki·∫øm c√¥ng th·ª©c..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-2">
              {["all", "D·ªÖ", "Trung b√¨nh", "Kh√≥"].map((difficulty) => (
                <Button
                  key={difficulty}
                  variant={selectedDifficulty === difficulty ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedDifficulty(difficulty)}
                >
                  {difficulty === "all" ? "T·∫•t c·∫£" : difficulty}
                </Button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* All Recipes */}
      <Card>
        <CardHeader>
          <CardTitle>T·∫•t c·∫£ c√¥ng th·ª©c</CardTitle>
          <CardDescription>
            {filteredRecipes.length} c√¥ng th·ª©c ƒë∆∞·ª£c t√¨m th·∫•y
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredRecipes.map((recipe) => (
              <Card key={recipe.id} className="hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
                <CardContent className="p-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="text-3xl">{recipe.image}</div>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline">{recipe.category}</Badge>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleFavorite(recipe.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Heart className={`h-4 w-4 ${favorites.has(recipe.id) ? 'fill-current' : ''}`} />
                        </Button>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="font-bold text-lg">{recipe.name}</h4>
                      <p className="text-sm text-gray-600 mt-2">{recipe.description}</p>
                    </div>

                    <div className="flex flex-wrap gap-2">
                      <Badge variant="outline" className="text-xs">
                        <Clock className="h-3 w-3 mr-1" />
                        {recipe.cookTime}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        <Users className="h-3 w-3 mr-1" />
                        {recipe.servings} ng∆∞·ªùi
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        <Star className="h-3 w-3 mr-1" />
                        {recipe.rating}
                      </Badge>
                      <Badge 
                        variant={recipe.difficulty === "D·ªÖ" ? "secondary" : 
                                recipe.difficulty === "Trung b√¨nh" ? "default" : "destructive"}
                        className="text-xs"
                      >
                        {recipe.difficulty}
                      </Badge>
                    </div>

                    <div className="space-y-2 text-xs">
                      <div>
                        <p className="font-medium text-green-600">C√≥ s·∫µn ({recipe.availableIngredients.length}):</p>
                        <p className="text-green-600">{recipe.availableIngredients.join(", ")}</p>
                      </div>
                      {recipe.missingIngredients.length > 0 && (
                        <div>
                          <p className="font-medium text-red-600">C·∫ßn mua ({recipe.missingIngredients.length}):</p>
                          <p className="text-red-600">{recipe.missingIngredients.join(", ")}</p>
                        </div>
                      )}
                    </div>

                    <div className="flex gap-2">
                      <Button size="sm" className="flex-1">
                        Xem c√¥ng th·ª©c
                      </Button>
                      <Button size="sm" variant="outline" className="flex-1">
                        Th√™m v√†o k·∫ø ho·∫°ch
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Recipes;
